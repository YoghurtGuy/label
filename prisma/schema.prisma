// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    password      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdTasks  AnnotationTask[] @relation("CreatedTasks")
    assignedTasks AnnotationTask[] @relation("AssignedTasks")
    annotations   Annotation[]
    datasets      Dataset[]
    adminPermission Boolean @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Dataset {
    id          String   @id @default(cuid())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    images      Image[]
    tasks       AnnotationTask[]
    type        DatasetType @default(OBJECT_DETECTION)
    labels      Label[]
    
    @@index([name])
}

model Image {
    id          String   @id @default(cuid())
    filename    String
    path        String
    width       Int
    height      Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    dataset     Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)
    datasetId   String
    annotations Annotation[]
    task        AnnotationTask? @relation(fields: [taskId], references: [id])
    taskId      String?

    @@index([filename])
}

model AnnotationTask {
    id          String   @id @default(cuid())
    name        String
    description String?
    status      TaskStatus @default(PENDING)
    // progress    Float    @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    creator     User     @relation("CreatedTasks", fields: [creatorId], references: [id])
    creatorId   String
    assignedTo  User?    @relation("AssignedTasks", fields: [assignedToId], references: [id])
    assignedToId String?
    dataset     Dataset  @relation(fields: [datasetId], references: [id])
    datasetId   String
    images      Image[]
    annotations Annotation[]

    @@index([status])
}

model Annotation {
    id          String   @id @default(cuid())
    type        AnnotationType
    label       Label?   @relation(fields: [labelId], references: [id])
    labelId     String?
    text        String?  // OCR文本内容
    status      AnnotationStatus @default(IGNORE)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User?     @relation(fields: [createdById], references: [id])
    createdById String?
    image       Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
    imageId     String
    task        AnnotationTask? @relation(fields: [taskId], references: [id])
    taskId      String?
    points      Point[]  // 用于矩形和多边形标注的点位

    @@index([type])
}

model Point {
    id            String     @id @default(cuid())
    x             Float      // x坐标
    y             Float      // y坐标
    order         Int        // 点位的顺序，用于多边形
    annotation    Annotation @relation(fields: [annotationId], references: [id], onDelete: Cascade)
    annotationId  String

    @@index([annotationId, order])
}

enum TaskStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
    REVIEWING
}

enum AnnotationType {
    RECTANGLE
    POLYGON
    OCR
}

enum DatasetType {
    OBJECT_DETECTION
    OCR
}

enum AnnotationStatus {
    PENDING
    CORRECT
    INCORRECT
    IGNORE
}

model Label {
    id          String   @id @default(cuid())
    name        String   // 标签名称
    color       String   // 标签颜色，用于UI显示
    description String?  // 标签描述
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    dataset     Dataset  @relation(fields: [datasetId], references: [id], onDelete: Cascade)
    datasetId   String
    annotations Annotation[]  // 使用该标签的标注

    @@unique([name, datasetId])  // 确保在同一数据集中标签名称唯一
    @@index([name])
}
